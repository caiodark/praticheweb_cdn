{"version":3,"sources":["webpack:///./src/app/world-list/world-list.module.ts","webpack:///./src/app/world-list/world-list.page.html","webpack:///./src/app/world-list/world-list.page.scss","webpack:///./src/app/world-list/world-list.page.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;AAAyC;AACM;AACmB;AACX;AAEV;AAEK;AAElD,IAAM,MAAM,GAAW;IACrB;QACE,IAAI,EAAE,EAAE;QACR,SAAS,EAAE,8DAAa;KACzB;CACF,CAAC;AAYF;IAAA;IAAkC,CAAC;IAAtB,mBAAmB;QAV/B,8DAAQ,CAAC;YACR,OAAO,EAAE;gBACP,4DAAY;gBACZ,0DAAW;gBACX,kEAAmB;gBACnB,0DAAW;gBACX,4DAAY,CAAC,QAAQ,CAAC,MAAM,CAAC;aAC9B;YACD,YAAY,EAAE,CAAC,8DAAa,CAAC;SAC9B,CAAC;OACW,mBAAmB,CAAG;IAAD,0BAAC;CAAA;AAAH;;;;;;;;;;;;AC1BhC,wYAAwY,UAAU,2tCAA2tC,QAAQ,qL;;;;;;;;;;;ACArnD,+DAA+D,mJ;;;;;;;;;;;;;;;;;;;;;ACAK;AACF;AACV;AAEC;AAEK;AAO9D;IAME,uBACU,EAAmB,EACnB,EAAmB,EACnB,MAAc,EACd,KAAqB,EACrB,OAAqB;QAJrB,OAAE,GAAF,EAAE,CAAiB;QACnB,OAAE,GAAF,EAAE,CAAiB;QACnB,WAAM,GAAN,MAAM,CAAQ;QACd,UAAK,GAAL,KAAK,CAAgB;QACrB,YAAO,GAAP,OAAO,CAAc;QATtB,kBAAa,GAAwB,EAAE,CAAC;QACxC,aAAQ,GAAG,EAAE,CAAC;IAQY,CAAC;IAEpC,gCAAQ,GAAR;IACA,CAAC;IAED,mCAAW,GAAX;QACE,IAAI,IAAI,CAAC,MAAM,EAAE;YACf,IAAI,CAAC,MAAM,CAAC,WAAW,EAAE,CAAC;SAC3B;IACH,CAAC;IAEO,+BAAO,GAAf,UAAgB,OAAqB,EAAE,IAAY;QACjD,OAAO,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YACjC,OAAO,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC,SAAS,CAAC;gBACnC,IAAI,YAAC,IAAI;oBACP,OAAO,CAAC,IAAI,CAAC,CAAC;gBAChB,CAAC;gBACD,KAAK,YAAC,GAAG;oBACP,MAAM,CAAC,GAAG,CAAC,CAAC;gBACd,CAAC;aACF,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC;IAEO,mCAAW,GAAnB,UAAoB,KAAqB;QACvC,OAAO,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YACjC,KAAK,CAAC,MAAM,CAAC,SAAS,CAAC,gBAAM;gBAC3B,OAAO,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC;YAC3B,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC;IAEa,mCAAW,GAAzB,UAA0B,OAAe;;;;;4BACzB,qBAAM,IAAI,CAAC,EAAE,CAAC,MAAM,CAAC;4BACjC,OAAO;4BACP,QAAQ,EAAE,IAAI;yBACf,CAAC;;wBAHI,KAAK,GAAG,SAGZ;wBACF,qBAAM,KAAK,CAAC,OAAO,EAAE;;wBAArB,SAAqB,CAAC;;;;;KACvB;IAEa,gCAAQ,GAAtB;;;;;;;wBAEI,SAAI;wBAAY,qBAAM,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,KAAK,CAAC;;wBAAlD,GAAK,QAAQ,GAAG,SAAkC,CAAC;wBACnD,SAAI;wBAAiB,qBAAM,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,QAAQ,CAAC;;wBAApE,GAAK,aAAa,GAAG,SAA+C,CAAC;;;;wBAErE,IAAI,CAAC,WAAW,CAAC,qCAAmC,GAAG,CAAC,CAAC;wBACzD,IAAI,CAAC,aAAa,GAAG,EAAE,CAAC;;;;;;KAE3B;IAEK,wCAAgB,GAAtB;;;gBACE,IAAI,CAAC,QAAQ,EAAE,CAAC;;;;KACjB;IAED,mCAAW,GAAX,UAAY,EAAU;QACpB,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,eAAe,EAAE,IAAI,CAAC,QAAQ,EAAE,EAAE,CAAC,CAAC,CAAC;IAC7D,CAAC;IAED,qCAAa,GAAb;QACE,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,eAAe,EAAE,IAAI,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC,CAAC;IAChE,CAAC;IAEO,kCAAU,GAAlB,UAAmB,EAAU;QAC3B,IAAM,IAAI,GAAG,IAAI,CAAC;QAClB,OAAO,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YACjC,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC,IAAI,CAAC,QAAQ,EAAE,EAAE,CAAC,CAAC,SAAS,CAAC;gBACpD,IAAI,YAAC,GAAG;oBACN,OAAO,CAAC,GAAG,CAAC,CAAC;gBACf,CAAC;gBACD,KAAK,YAAC,GAAG;oBACP,OAAO,CAAC,yEAAa,CAAC,MAAM,CAAC,CAAC;gBAChC,CAAC;aACF,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC;IAEa,qCAAa,GAA3B,UAA4B,EAAU;;;;;;;wBAC9B,IAAI,GAAG,IAAI,CAAC;wBACJ,qBAAM,IAAI,CAAC,EAAE,CAAC,MAAM,CAAC;gCACjC,MAAM,EAAE,uBAAuB;gCAC/B,OAAO,EAAE,kDAAkD;gCAC3D,OAAO,EAAE;oCACP;wCACE,IAAI,EAAE,SAAS;wCACf,IAAI,EAAE,QAAQ;wCACd,QAAQ,EAAE,WAAW;wCACrB,OAAO,EAAE,UAAC,GAAG,IAAM,CAAC;qCACrB;oCACD;wCACE,IAAI,EAAE,UAAU;wCAChB,OAAO,EAAE;;;;;;wDAEM,qBAAM,IAAI,CAAC,UAAU,CAAC,EAAE,CAAC;;wDAA9B,EAAE,GAAG,SAAyB;6DAChC,GAAE,KAAK,yEAAa,CAAC,EAAE,GAAvB,wBAAuB;wDACzB,qBAAM,IAAI,CAAC,QAAQ,EAAE;;wDAArB,SAAqB,CAAC;wDACtB,qBAAM,IAAI,CAAC,WAAW,CAAC,mCAAmC,CAAC;;wDAA3D,SAA2D,CAAC;;4DAE5D,qBAAM,IAAI,CAAC,WAAW,CAAC,uCAAuC,CAAC;;wDAA/D,SAA+D,CAAC;;;;;wDAGlE,qBAAM,IAAI,CAAC,WAAW,CAAC,sCAA+B,GAAC,eAAY,CAAC;;wDAApE,SAAoE,CAAC;;;;;6CAExE;qCACF;iCACF;6BACF,CAAC;;wBA3BI,KAAK,GAAG,SA2BZ;wBACF,qBAAM,KAAK,CAAC,OAAO,EAAE;;wBAArB,SAAqB,CAAC;;;;;KACvB;IAEK,qCAAa,GAAnB,UAAoB,EAAU;;;;4BAC5B,qBAAM,IAAI,CAAC,aAAa,CAAC,EAAE,CAAC;;wBAA5B,SAA4B,CAAC;;;;;KAC9B;IAxHQ;QAAR,2DAAK,EAAE;wEAAgB,KAAK;wDAAoB;IACxC;QAAR,2DAAK,EAAE;;mDAAe;IAHZ,aAAa;QALzB,+DAAS,CAAC;YACT,QAAQ,EAAE,gBAAgB;YAC1B,wGAAqC;;SAEtC,CAAC;+EAQc,8DAAe;YACf,8DAAe;YACX,sDAAM;YACP,8DAAc;YACZ,oEAAY;OAXpB,aAAa,CA2HzB;IAAD,oBAAC;CAAA;AA3HyB","file":"world-list-world-list-module.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { WorldListPage } from './world-list.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: WorldListPage\n  }\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    IonicModule,\n    RouterModule.forChild(routes)\n  ],\n  declarations: [WorldListPage]\n})\nexport class WorldListPageModule {}\n","module.exports = \"<ion-header>\\n  <ion-toolbar>\\n    <ion-buttons slot=\\\"start\\\">\\n      <ion-menu-button icon-only menuToggle=\\\"start\\\">\\n          <ion-icon name=\\\"menu\\\"></ion-icon>\\n      </ion-menu-button>          \\n    </ion-buttons>\\n    <ion-title>\\n          Pratiche Web\\n    </ion-title>\\n  </ion-toolbar>\\n</ion-header>\\n\\n<ion-content>\\n  <div class=\\\"ion-padding\\\">\\n    <h1>{{KindName}}</h1>\\n    <div *ngIf=\\\"!Organizations || Organizations.length === 0\\\">\\n      Nessun elemento presente <br />\\n      <ion-button color=\\\"tertiary\\\" size=\\\"default\\\" (click)=\\\"onCreateClick()\\\">\\n        <ion-icon slot=\\\"icon-only\\\" name=\\\"create\\\"></ion-icon>\\n      </ion-button>\\n    </div>\\n    <div *ngIf=\\\"Organizations && Organizations.length > 0\\\">\\n      <ion-button color=\\\"tertiary\\\" (click)=\\\"onCreateClick()\\\" size=\\\"default\\\">\\n        <ion-icon slot=\\\"icon-only\\\" name=\\\"create\\\"></ion-icon>\\n      </ion-button>\\n    </div>\\n    <ion-grid *ngIf=\\\"Organizations && Organizations.length > 0\\\">\\n      <ion-row>\\n        <ion-col size=\\\"12\\\" size-sm>\\n          <ion-list>\\n            <ion-virtual-scroll [items] = \\\"Organizations\\\">\\n              <ion-item *virtualItem=\\\"let o\\\" lines=\\\"full\\\" >\\n                <ion-button color=\\\"primary\\\" (click)=\\\"onItemClick(o._id)\\\" slot=\\\"start\\\">\\n                  <ion-icon slot=\\\"icon-only\\\" name=\\\"compass\\\"></ion-icon>\\n                </ion-button>\\n                <ion-button color=\\\"danger\\\" slot=\\\"end\\\" (click)=\\\"onItemDelete(o._id)\\\">\\n                  <ion-icon slot=\\\"icon-only\\\" name=\\\"trash\\\"></ion-icon>\\n                </ion-button>\\n                <ion-label>{{o.name}}</ion-label>\\n              </ion-item>\\n            </ion-virtual-scroll>\\n          </ion-list>\\n        </ion-col>\\n      </ion-row>\\n    </ion-grid>\\n  </div>\\n</ion-content>\\n\"","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3dvcmxkLWxpc3Qvd29ybGQtbGlzdC5wYWdlLnNjc3MifQ== */\"","import { Component, OnInit, Input, OnDestroy } from '@angular/core';\nimport { AlertController, ToastController } from '@ionic/angular';\nimport { ActivatedRoute, Router} from '@angular/router';\nimport { Organization } from '../models/organization';\nimport { WorldService } from '../services/world.service';\nimport { Subscription } from 'rxjs';\nimport { ServiceStatus } from '../models/service-status.enum';\n\n@Component({\n  selector: 'app-world-list',\n  templateUrl: './world-list.page.html',\n  styleUrls: ['./world-list.page.scss'],\n})\nexport class WorldListPage implements OnInit, OnDestroy {\n\n  @Input() Organizations: Array<Organization> = [];\n  @Input() KindName = '';\n  private Route$: Subscription;\n\n  constructor(\n    private ac: AlertController,\n    private tc: ToastController,\n    private router: Router,\n    private route: ActivatedRoute,\n    private service: WorldService) { }\n\n  ngOnInit() {\n  }\n\n  ngOnDestroy() {\n    if (this.Route$) {\n      this.Route$.unsubscribe();\n    }\n  }\n\n  private GetList(service: WorldService, kind: string): Promise<Array<Organization>> {\n    return new Promise((resolve, reject) => {\n      service.asyncGetList(kind).subscribe({\n        next(orgs) {\n          resolve(orgs);\n        },\n        error(err) {\n          reject(err);\n        }\n      });\n    });\n  }\n\n  private GetKindName(route: ActivatedRoute): Promise<string> {\n    return new Promise((resolve, reject) => {\n      route.params.subscribe(params => {\n        resolve(params['world']);\n      });\n    });\n  }\n\n  private async ShowMessage(message: string) {\n    const toast = await this.tc.create({\n      message,\n      duration: 2000\n    });\n    await toast.present();\n  }\n\n  private async LoadData() {\n    try {\n      this.KindName = await this.GetKindName(this.route);\n      this.Organizations = await this.GetList(this.service, this.KindName);\n    } catch (e) {\n      this.ShowMessage(`Errore nel caricamento dei dati ${e}`);\n      this.Organizations = [];\n    }\n  }\n\n  async ionViewWillEnter() {\n    this.LoadData();\n  }\n\n  onItemClick(id: string) {\n    this.router.navigate(['organizations', this.KindName, id]);\n  }\n\n  onCreateClick() {\n    this.router.navigate(['organizations', this.KindName, 'new']);\n  }\n\n  private DeleteItem(id: string): Promise<ServiceStatus> {\n    const self = this;\n    return new Promise((resolve, reject) => {\n      self.service.asyncDelete(self.KindName, id).subscribe({\n        next(ris) {\n          resolve(ris);\n        },\n        error(err) {\n          resolve(ServiceStatus.FAILED);\n        }\n      });\n    });\n  }\n\n  private async ConfirmDelete(id: string) {\n    const self = this;\n    const alert = await this.ac.create({\n      header: 'Cancellazione opzione',\n      message: 'Stai per <strong>cancellare</strong> una opzione',\n      buttons: [\n        {\n          text: 'Annulla',\n          role: 'cancel',\n          cssClass: 'secondary',\n          handler: (cnl) => {}\n        },\n        {\n          text: 'Conferma',\n          handler: async () => {\n            try {\n              const ss = await this.DeleteItem(id);\n              if (ss === ServiceStatus.OK) {\n                await self.LoadData();\n                await self.ShowMessage('Opzione correttamente cancellata.');\n              } else {\n                await self.ShowMessage('Si è verificato un problema. Riprova!');\n              }\n            } catch (e) {\n              await self.ShowMessage(`Si è verificato un problema ${e}. Riprova!`);\n            }\n          }\n        }\n      ]\n    });\n    await alert.present();\n  }\n\n  async onDeleteClick(id: string) {\n    await this.ConfirmDelete(id);\n  }\n}\n"],"sourceRoot":""}